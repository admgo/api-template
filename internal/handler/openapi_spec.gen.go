// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWX2/bOBL/KnO8A3oFZMmxe/fgp2bbLpDtogng9mGRFAVNjcxpJJIlR1a0Qb77gpQV",
	"27W3TYt9EkHOzO83/3UvlG2cNWg4iMW9CEpjI9PxQ0Afv85bh54J0y02kup0uJONq1EsxGerzct0nyvb",
	"iExw7+J9YE9mLR4yUZEP/E42eKj4m9XmlDiVB3Jn00xU1jeSxUKQ4f+/2CmRYVyjj1q1PIkhGwynQJwM",
	"obP+EEqczeYv/ndSXFuDT5RtA/olS25TxEoMypNjskYsUlRh+5jt+Xjo4nx20sVo2By5yBpTro6YPDze",
	"2NVnVCwycdek5A1Gkj3xEOUCqtYT98uY/yHT0tGnW+zjkSJzjbJMKFvl8f0RRDp6i30KFnJg6/GTbFlH",
	"A1Vtu2SUGleTIk4ALWvr6U8ZQ/PB1xGD2YVFUYwG5nno5HqNPidb2KhQjFooMhGUdQNZj7JcRC2xSGfo",
	"beshXWSi88Q4vja2pKpPT0BmkJNK2dbwEIoxZBFoNlzhHcfA16+tOpHSX8mUYFuGxnoEuYrH5UBbZKI9",
	"cGznTip0U9loT1nDUvFef8VgMsrm5aHCIfB7TQEogISQagGukGEZ4wZL9Bv0sJIBS7AGWCNcOjTnVxcw",
	"z6cQHCqqSKXY5wB/2BaUNFAd+3Jjts6AZLg+duTjf4/vnudwMYCyJl8CMfoEBbZK1w4ZUoYz6PDZBiF0",
	"xEpjCWyTQImB1pGPDwzSOW+l0v+6MSNRYzvQWDtoA1DjvN1g0osOdhpZowfiZwFWPTTylswalJZmjWGH",
	"UJGhRIo4YF2B9eObsiXmN+a9lgyd7DPoiDUwNYlvIvA1KBlYo0Ev6wykKQHvnA0IwTY4Om2wgwoltx5T",
	"7V2eL+f5jbkxyyjUBqzaGmoyt2FxYyZw/V7vp9Sjs4HY+n4X8TWxbldx7I7Bn0hHj+exjZ4/mgu29Wog",
	"vOd/FT3fB/thhGJV21XRyMDoi+BV0UgyhccBLxTWoZGO8l429XORiZoUmoB7s+jcSaURZvn0qGm6rstl",
	"es6tXxdb3VD8fvHqzbvlm8ksn+aamzp2CKNvwmUV658Unuy8IskUcXARpwk6FvjV1huY7DeLyMQGfRh6",
	"7iyf5meziLR1SSzEPJ8mKSdZp/lQxMFa3MepfPH6IS1RG1J7x1WaGuGiFAvxyqPkcXg76WWDjD6IxfXf",
	"zNzz/ZGZBmBc19Hw0ejfWvjSou93BoZ8iEx4/NKSx1Is2Lf4FEvK2lvCnSm2t/hNDpm4m1jpaBK7aY1m",
	"gnfs5YTlOgVpI2sqJWOa2FsyCe1wyF28ju0TAxqbs0JWWmQDoxjvHZ8h2t907Ql/ET9B+eMAiYF/sWU/",
	"znM0w5JzceGlfBWfQ/Tofo/QfzxWYiH+Xez+wortL1jxYbucH6L54Gws+agzm07/cYyvN8vl24Scfgzi",
	"IhlKsv3+jo6zYTMXMSZD0K6/zuebDfqedRzIw6pMG/hq2NQ/sGi/s1q3ReGQxXFNnSuFIS2Cx463voxu",
	"/syuj/yTkadRGkSPSV2OoyFs7bZhv/WHf7WPD38FAAD//247tQWyCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
